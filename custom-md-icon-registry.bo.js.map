{"version":3,"file":"custom-md-icon-registry.js","sourceRoot":"","sources":["custom-md-icon-registry.js"],"names":[],"mappings":";AAUA,OAAO,EAAE,cAAc,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AACvD,OAAO,EAAE,EAAE,EAAE,MAAM,oBAAoB,CAAC;AACxC,OAAO,EAAE,cAAc,EAAE,MAAM,mBAAmB,CAAC;AACnD,OAAO,EAAE,IAAI,EAAE,MAAM,eAAe,CAAC;AACrC,OAAO,EAAE,YAAY,EAAE,MAAM,2BAA2B,CAAC;AACzD;;;;;;;;;;;;GAYG;AACH,MAAM,CAAC,IAAI,SAAS,GAAG,IAAI,cAAc,CAAC,UAAU,CAAC,CAAC;AACtD;;;GAGG;AACH,IAAI,oBAAoB,GAAG,CAAC,UAAU,MAAM;IACxC,SAAS,CAAC,oBAAoB,EAAE,MAAM,CAAC,CAAC;IACxC,8BAA8B,IAAI,EAAE,SAAS,EAAE,QAAQ;QACnD,IAAI,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,SAAS,CAAC,IAAI,IAAI,CAAC;QACvD,KAAK,CAAC,oBAAoB,GAAG,EAAE,CAAC;QAChC,KAAK,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;QAChC,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;IACD,oBAAoB,CAAC,SAAS,CAAC,eAAe,GAAG,UAAU,QAAQ,EAAE,SAAS;QAC1E,EAAE,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YACtC,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;QACnE,CAAC;QACD,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC;IAC5E,CAAC,CAAC;IACF,oBAAoB,CAAC,SAAS,CAAC,eAAe,GAAG,UAAU,QAAQ;QAC/D,IAAI,KAAK,GAAG,IAAI,CAAC;QACjB,IAAI,GAAG,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QACxC,QAAQ,CAAC,OAAO,CAAC,UAAU,IAAI;YAC3B,mFAAmF;YACnF,GAAG,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;YAC/B,KAAK,CAAC,oBAAoB,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QACrE,CAAC,CAAC,CAAC;IACP,CAAC,CAAC;IACF,oBAAoB,CAAC,cAAc,GAAG,cAAc,MAAM,CAAC,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,EAAE,IAAI,EAAE,YAAY,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,SAAS,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IAC1K,MAAM,CAAC,oBAAoB,CAAC;AAChC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;AACnB,OAAO,EAAE,oBAAoB,EAAE,CAAC;AAChC,uIAAuI","sourcesContent":["var __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nimport { InjectionToken, Inject } from '@angular/core';\r\nimport { of } from 'rxjs/observable/of';\r\nimport { MdIconRegistry } from '@angular/material';\r\nimport { Http } from '@angular/http';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n/**\r\n * Use SVG_ICONS (and SvgIconInfo) as \"multi\" providers to provide the SVG source\r\n * code for the icons that you wish to have preloaded in the `CustomMdIconRegistry`\r\n * For compatibility with the MdIconComponent, please ensure that the SVG source has\r\n * the following attributes:\r\n *\r\n * * `xmlns=\"http://www.w3.org/2000/svg\"`\r\n * * `focusable=\"false\"` (disable IE11 default behavior to make SVGs focusable)\r\n * * `height=\"100%\"` (the default)\r\n * * `width=\"100%\"` (the default)\r\n * * `preserveAspectRatio=\"xMidYMid meet\"` (the default)\r\n *\r\n */\r\nexport var SVG_ICONS = new InjectionToken('SvgIcons');\r\n/**\r\n * A custom replacement for Angular Material's `MdIconRegistry`, which allows\r\n * us to provide preloaded icon SVG sources.\r\n */\r\nvar CustomMdIconRegistry = (function (_super) {\r\n    __extends(CustomMdIconRegistry, _super);\r\n    function CustomMdIconRegistry(http, sanitizer, svgIcons) {\r\n        var _this = _super.call(this, http, sanitizer) || this;\r\n        _this.preloadedSvgElements = {};\r\n        _this.loadSvgElements(svgIcons);\r\n        return _this;\r\n    }\r\n    CustomMdIconRegistry.prototype.getNamedSvgIcon = function (iconName, namespace) {\r\n        if (this.preloadedSvgElements[iconName]) {\r\n            return of(this.preloadedSvgElements[iconName].cloneNode(true));\r\n        }\r\n        return _super.prototype.getNamedSvgIcon.call(this, iconName, namespace);\r\n    };\r\n    CustomMdIconRegistry.prototype.loadSvgElements = function (svgIcons) {\r\n        var _this = this;\r\n        var div = document.createElement('DIV');\r\n        svgIcons.forEach(function (icon) {\r\n            // SECURITY: the source for the SVG icons is provided in code by trusted developers\r\n            div.innerHTML = icon.svgSource;\r\n            _this.preloadedSvgElements[icon.name] = div.querySelector('svg');\r\n        });\r\n    };\r\n    CustomMdIconRegistry.ctorParameters = function () { return [{ type: Http }, { type: DomSanitizer }, { type: null, decorators: [{ type: Inject, args: [SVG_ICONS] }] }]; };\r\n    return CustomMdIconRegistry;\r\n}(MdIconRegistry));\r\nexport { CustomMdIconRegistry };\r\n//# sourceMappingURL=D:/work/devkit/tests/@angular_devkit/build_optimizer/webpack/aio-app/src/app/shared/custom-md-icon-registry.js.map"]}
